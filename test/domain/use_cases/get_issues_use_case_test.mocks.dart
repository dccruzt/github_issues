// Mocks generated by Mockito 5.4.4 from annotations
// in github_issues/test/domain/use_cases/get_issues_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:github_issues/domain/entities/issue.dart' as _i2;
import 'package:github_issues/domain/repositories/issues_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIssue_0 extends _i1.SmartFake implements _i2.Issue {
  _FakeIssue_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IssuesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIssuesRepository extends _i1.Mock implements _i3.IssuesRepository {
  MockIssuesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Issue>> getIssues() => (super.noSuchMethod(
        Invocation.method(
          #getIssues,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Issue>>.value(<_i2.Issue>[]),
      ) as _i4.Future<List<_i2.Issue>>);

  @override
  _i4.Future<_i2.Issue> getIssue(String? number) => (super.noSuchMethod(
        Invocation.method(
          #getIssue,
          [number],
        ),
        returnValue: _i4.Future<_i2.Issue>.value(_FakeIssue_0(
          this,
          Invocation.method(
            #getIssue,
            [number],
          ),
        )),
      ) as _i4.Future<_i2.Issue>);

  @override
  void setVisitedIssue(String? issue) => super.noSuchMethod(
        Invocation.method(
          #setVisitedIssue,
          [issue],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<String>> getVisitedIssues() => (super.noSuchMethod(
        Invocation.method(
          #getVisitedIssues,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}
